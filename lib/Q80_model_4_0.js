/*
 Copyright 2013 ClinRisk Ltd.
 Modifications to port QRISK2-2014 to javascript copyright 2014 Black Pear Software Ltd.

 This file is part of QRISK2-2014 (http://qrisk.org, original sources at http://svn.clinrisk.co.uk/opensource/qrisk2).

 QRISK2-2014 is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 QRISK2-2014 is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with QRISK2-2014.  If not, see <http://www.gnu.org/licenses/>.

 Additional terms

 The following disclaimer must be held together with any risk score score generated by this code.  If the score is displayed, then this disclaimer must be displayed or otherwise be made easily accessible, e.g. by a prominent link alongside it.
 The initial version of this file, to be found at http://svn.clinrisk.co.uk/opensource/qrisk2, faithfully implements QRISK2-2014.
 ClinRisk Ltd. have released this code under the GNU Lesser General Public License to enable others to implement the algorithm faithfully.
 However, the nature of the GNU Lesser General Public License is such that we cannot prevent, for example, someone accidentally
 altering the coefficients, getting the inputs wrong, or just poor programming.
 ClinRisk Ltd. stress, therefore, that it is the responsibility of the end user to check that the source that they receive produces the same results as the original code posted at http://svn.clinrisk.co.uk/opensource/qrisk2.
 Inaccurate implementations of risk scores can lead to wrong patients being given the wrong treatment.

 End of additional terms
 */
var validate = require('./validation');
var expectedArgs = require('./args');
var disclaimer = require('./disclaimer');
var decorateAlgorithm = require('./decorateAlgorithm');

var rules = [
    validate.objectHasProperties(expectedArgs),
    validate.propertyIsInRange('age', 25, 84),
    validate.propertyIsZeroOrOne('b_AF'),
    validate.propertyIsZeroOrOne('b_ra'),
    validate.propertyIsZeroOrOne('b_renal'),
    validate.propertyIsZeroOrOne('b_treatedhyp'),
    validate.propertyIsZeroOrOne('b_type1'),
    validate.propertyIsZeroOrOne('b_type2'),
    validate.propertyIsInRange('bmi', 20, 40),
    validate.propertyIsInRange('ethrisk', 1, 9),
    validate.propertyIsZeroOrOne('fh_cvd'),
    validate.propertyIsInRange('rati', 1, 12),
    validate.propertyIsInRange('sbp', 70, 210),
    validate.propertyIsInRange('smoke_cat', 0, 4),
    validate.propertyHasValue('surv', 10),
    validate.propertyIsInRange('town', -7, 11)
];

var algorithm = function(args) {
        var survivor = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.988948762416840,
            0,
            0,
            0,
            0,
            0
        ];

        /* The conditional arrays */

        var Iethrisk = [
            0,
            0,
            0.2671958047902151500000000,
            0.7147534261793343500000000,
            0.3702894474455115700000000,
            0.2073797362620235500000000,
            -0.1744149722741736900000000,
            -0.3271878654368842200000000,
            -0.2200617876129250500000000,
            -0.2090388032466696800000000
        ];

        var Ismoke = [
            0,
            0.1947480856528854800000000,
            0.6229400520450627500000000,
            0.7405819891143352600000000,
            0.9134392684576959600000000
        ];

        /* Applying the fractional polynomial transforms */
        /* (which includes scaling)                      */

        var dage = args.age;
        dage = dage / 10;
        var age_1 = Math.pow(dage, 0.5);
        var age_2 = dage;
        var dbmi = args.bmi;
        dbmi = dbmi / 10;
        var bmi_1 = Math.pow(dbmi, -2);
        var bmi_2 = Math.pow(dbmi, -2) * Math.log(dbmi);

        /* Centring the continuous variables */

        age_1 = age_1 - 2.099778413772583;
        age_2 = age_2 - 4.409069538116455;
        bmi_1 = bmi_1 - 0.154046609997749;
        bmi_2 = bmi_2 - 0.144072100520134;
        var rati = args.rati - 3.554229259490967;
        var sbp = args.sbp - 125.773628234863280;
        var town = args.town - 0.032508373260498;

        /* Start of Sum */
        var a = 0;

        /* The conditional sums */

        a += Iethrisk[args.ethrisk];
        a += Ismoke[args.smoke_cat];

        /* Sum from continuous values */

        a += age_1 * 3.8734583855051343000000000;
        a += age_2 * 0.1346634304478384600000000;
        a += bmi_1 * -0.1557872403333062600000000;
        a += bmi_2 * -3.7727795566691125000000000;
        a += rati * 0.1525695208919679600000000;
        a += sbp * 0.0132165300119653560000000;
        a += town * 0.0643647529864017080000000;

        /* Sum from boolean values */

        a += args.b_AF * 1.4235421148946676000000000;
        a += args.b_ra * 0.3021462511553648100000000;
        a += args.b_renal * 0.8614743039721416400000000;
        a += args.b_treatedhyp * 0.5889355458733703800000000;
        a += args.b_type1 * 1.6684783657502795000000000;
        a += args.b_type2 * 1.1350165062510138000000000;
        a += args.fh_cvd * 0.5133972775738673300000000;

        /* Sum from interaction terms */

        a += age_1 * (args.smoke_cat == 1) * 0.6891139747579299000000000;
        a += age_1 * (args.smoke_cat == 2) * 0.6942632802121626600000000;
        a += age_1 * (args.smoke_cat == 3) * -1.6952388644218186000000000;
        a += age_1 * (args.smoke_cat == 4) * -1.2150150940219255000000000;
        a += age_1 * args.b_AF * -3.5855215448190969000000000;
        a += age_1 * args.b_renal * -3.0766647922469192000000000;
        a += age_1 * args.b_treatedhyp * -4.0295302811880314000000000;
        a += age_1 * args.b_type1 * -0.3344110567405778600000000;
        a += age_1 * args.b_type2 * -3.3144806806620530000000000;
        a += age_1 * bmi_1 * -5.5933905797230006000000000;
        a += age_1 * bmi_2 * 64.3635572837688980000000000;
        a += age_1 * args.fh_cvd * 0.8605433761217157200000000;
        a += age_1 * sbp * -0.0509321154551188590000000;
        a += age_1 * town * 0.1518664540724453700000000;
        a += age_2 * (args.smoke_cat == 1) * -0.1765395485882681500000000;
        a += age_2 * (args.smoke_cat == 2) * -0.2323836483278573000000000;
        a += age_2 * (args.smoke_cat == 3) * 0.2734395770551826300000000;
        a += age_2 * (args.smoke_cat == 4) * 0.1432552287454152700000000;
        a += age_2 * args.b_AF * 0.4986871390807032200000000;
        a += age_2 * args.b_renal * 0.4393033615664938600000000;
        a += age_2 * args.b_treatedhyp * 0.6904385790303250200000000;
        a += age_2 * args.b_type1 * -0.1734316566060327700000000;
        a += age_2 * args.b_type2 * 0.4864930655867949500000000;
        a += age_2 * bmi_1 * 1.5223341309207974000000000;
        a += age_2 * bmi_2 * -12.7413436207964070000000000;
        a += age_2 * args.fh_cvd * -0.2756708481415109900000000;
        a += age_2 * sbp * 0.0073790750039744186000000;
        a += age_2 * town * -0.0487465462679640900000000;

        /* Calculate the score itself */
        return 100.0 * (1 - Math.pow(survivor[args.surv], Math.exp(a)) );
};

module.exports = decorateAlgorithm('QRisk2.female', '2014', disclaimer, rules, algorithm);